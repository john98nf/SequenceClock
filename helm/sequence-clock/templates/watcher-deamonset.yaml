# Copyright Â© 2021 Giannis Fakinos

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: "{{ .Release.Name }}-watcher"
  labels:
    app: "{{ .Release.Name }}-watcher"
spec:
  selector:
    matchLabels:
      name: "{{ .Release.Name }}-watcher"
  template:
    metadata:
      labels:
        name: "{{ .Release.Name }}-watcher"
    spec:
      # Include this part, if scheduling to master
      # node is desired.
      {{ if eq .Values.cluster.ignoreMasterTaint true  }}
      tolerations:
      - key: node-role.kubernetes.io/master
        operator: Exists
        effect: NoSchedule
      {{ end }}
      containers:
      - name: "{{ .Release.Name }}-watcher"
        image: "{{ .Values.watcher.image.repository }}:{{ .Values.watcher.image.tag | default .Chart.AppVersion }}"
        imagePullPolicy: {{ .Values.watcher.image.pullPolicy }}
        volumeMounts:
        - mountPath: /var/run/docker.sock
          name: docker-api-socket
        ports:
          - name: http
            containerPort: 8080
            hostPort: 8080
            protocol: TCP
        env:
        - name: HOST_IP
          valueFrom:
            fieldRef:
              fieldPath: status.hostIP
        livenessProbe:
          httpGet:
            path: /api/check
            port: http
        readinessProbe:
          httpGet:
            path: /api/check
            port: http
      volumes:
      - name: docker-api-socket
        hostPath:
          path: /var/run/docker.sock
          type: Socket
